<launch>

  <include file="$(find realsense2_camera)/launch/rs_camera.launch">
        <arg name="align_depth" value="true"/>
        <arg name="unite_imu_method" value="linear_interpolation"/>
	<!--arg name="unite_imu_method" value="copy"/-->
        <!--arg name="enable_sync" value="true"/-->
        <!--arg name="enable_pointcloud" value="true"/-->
        <arg name="enable_gyro"   value="true"/>
        <arg name="enable_accel"  value="true"/>
        <!--arg name="enable_infra1" value="true"/-->
        <!--arg name="enable_infra2" value="true"/-->
        <arg name="gyro_fps"      value="400"/>
        <arg name="accel_fps"     value="250"/>
	<arg name="depth_fps" value="10"/>
    	<arg name="color_fps" value="10"/>
  </include>

  <node pkg="imu_filter_madgwick" type="imu_filter_node" name="ImuFilter">
        <param name="_use_mag" type="bool" value="false" />
        <param name="_publish_tf" type="bool" value="false" />
        <param name="_world_frame" type="string" value="enu" />
        <remap from="/imu/data_raw" to="/camera/imu"/>
	<param name="/imu/data" type="string" value="/rtabmap/imu"/>
  </node>

  <include file="$(find rtabmap_ros)/launch/rtabmap.launch">
	<arg name="args" value="--Optimizer/GravitySigma 0.3"/>
	<arg name="database_path" value="~/.ros/rtabmap_1.db" />
        <arg name="rgb_topic" value="/camera/color/image_raw"/>
        <arg name="depth_topic" value="/camera/aligned_depth_to_color/image_raw"/>
        <arg name="camera_info_topic" value="/camera/color/camera_info"/>
        <arg name="depth_camera_info_topic" value="/camera/depth/camera_info"/>
	<arg name="approx_sync" value="false"/>
        <arg name="rtabmapviz" value="true"/>
        <arg name="rviz" value="false"/>
	<!--arg name="wait_imu_to_init" value="true"/-->
	<arg name="imu_topic" value="/rtabmap/imu"/>
  </include>


	<!-- Set up parameters for rtabmap. Can also be done before launching the nodes. -->
	<!--group ns="rtabmap"-->

		<!-- Odometry -->
  	<node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry">
			<!--remap from="rgb/image" to="/camera/color/image_raw"/-->
      <!--remap from="depth/image" to="/camera/aligned_depth_to_color/image_raw"/-->
      <!--remap from="rgb/camera_info" to="/camera/color/camera_info"/-->
			<!-- The below was used in the example launch but may not be necessary. -->
			<!--remap from="rgbd_image"       to="rgbd_image"/--> 

			<!-- The below value should be set to false for RealSense cameras. -->
			<param name="approx_sync" type="bool" value="false"/>
 
			<!-- Set to use only x, y, and theta for directions from the IMU. -->
      <param name="Reg/Force3DoF"    value="true" />
      
      <!-- Reset the odometry automatically 1 frame after it has been lost. -->
			<param name="Odom/ResetCountdown"              value="1" />
			
			<!-- 0=Frame-to-Map (F2M) 1=Frame-to-Frame (F2F) -->
			<param name="Odom/Strategy" value="1"/>

			<!-- Activate to have camera location in terms of a fixed location on the robot. -->
			<!--param name="frame_id"            type="string" value="base_link"/-->
  	</node>

		
		<!-- Paramters for rtabmap -->
  	<node pkg="rtabmap_ros" type="rtabmap" name="rtabmap">
			<!-- Set to use only x, y, and theta for directions from the IMU. -->
      <param name="Reg/Force3DoF"    value="true" />
      <param name="Optimizer/Slam2D" value="true" />
      
      <param name="Reg/Strategy"              type="string" value="1"/> <!-- 0=vis, 1=ICP, 2=both. 1 works best when subscribed to laserscan inputs. -->

			<!-- When false, rtabmap will start a new map each time odometry is lost and join it with the old map once a loop closure is made. Setting to "true" instead will force rtabmap to start a session only when the images have localized with a previous map. "true" is ideal because even though the RealSense often loses its odometry, it's better to keep adding to the old map. -->
			<param name="Rtabmap/StartNewMapOnLoopClosure" value="false"/>
			<!-- Starts the rtabmap_ros node in Localization mode. NOTE: delete_db_on_start cannot be set, and in a "new map" launch file with this setting, this should be set to "true". -->
			<param name="Mem/IncrementalMemory" type="string" value="false"/>
			<param name="RGBD/SavedLocalizationIgnored" type="bool" value="false"/>

			<!-- Activate to have camera location in terms of a fixed location on the robot. -->
			<!--param name="frame_id"            type="string" value="base_link"/-->

			<param name="subscribe_depth"     type="bool"   value="true"/>
	    <param name="subscribe_scan"      type="bool"   value="true"/>

			<!-- maximum features map size, default 2000 -->
			<param name="OdomF2M/MaxSize" type="string" value="1000"/> 
			<!-- maximum features extracted by image, default 1000 -->
			<param name="Vis/MaxFeatures" type="string" value="600"/>

			<remap from="rgb/image"       to="/camera/rgb/image_rect_color"/>
      <remap from="depth/image"     to="/camera/aligned_depth_to_color/image_raw"/>
      <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
  	</node>
	<!--/group-->

	<!-- Launch node for creating a laserscan from the depth data. -->
	<node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">
       <remap from="image"     to="/camera/aligned_depth_to_color/image_raw"/>
       <remap from="camera_info" to="/camera/depth/camera_info"/>
       <remap from="scan" to="/scan"/>
       <param name="range_max" type="double" value="4.0"/>
  </node>

	<group ns="planner">
      <remap from="openni_points" to="/planner_cloud"/>
      <remap from="map" to="/rtabmap/proj_map"/>
      <remap from="move_base_simple/goal" to="/planner_goal"/>
        
      <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
         <rosparam file="costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="costmap_common_params.yaml" command="load" ns="local_costmap" />
         <rosparam file="local_costmap_params.yaml" command="load" />
         <rosparam file="global_costmap_params.yaml" command="load" />
         <rosparam file="base_local_planner_params.yaml" command="load" />
      </node>
   </group>

</launch>
